######################################################
########### Aaron J. Juarez, Sept 28, 2015 ###########
######################################################
import numpy as np
import pyfits, os, fnmatch

def findfiles(pattern, path):
    result = []
    for root, dirs, files in os.walk(path):
        for name in files:
            if fnmatch.fnmatch(name, pattern):
                result.append(os.path.join(root, name))
    return result

def binary_mask(start_row, end_row, start_col, end_col):
    mask = np.zeros((1024,1024))
    for i in range(len(mask)):
        if i < start_col or i > end_col: pass
        else:
            for j in range(len(mask[i])):
                if j > start_row and j < end_row:
                    mask[j][i] = 1
    return mask

#adapted from http://www.lpl.arizona.edu/~ianc/python/_modules/phot.html#centroid
def centroid(im, mask):
    """
    Compute centroid of an image with a specified binary mask projected upon it.
    INPUT:
      im -- image array
      mask -- binary mask, 0 in ignored regions and 1 in desired regions
      w is typically 1.0/u**2, where u is the uncertainty on im
      x,y are those generated by meshgrid.
    OUTPUT:
      (x0,y0) tuple of centroid location"""
    w = np.ones(im.shape)
    xx = np.arange(im.shape[1])
    yy = np.arange(im.shape[0])
    x,y = np.meshgrid(xx,yy)
    x0 = (x*im*mask*w).sum()/(im*mask*w).sum()
    y0 = (y*im*mask*w).sum()/(im*mask*w).sum()
    return (x0,y0)


f = open('centroids.txt','w')
target_names=['roxs12','roxs42B']
ones_mask = binary_mask(400,550,520,700) #mask for computing the centroid

for i in range(2):
    print target_names[i]
    nom=findfiles('*.fits', target_names[i]) #list of paths to *.fits files
    nom.pop(0) #remove first file (source image)
    if target_names[i]=='roxs42B':
        nom.pop(0) #remove second file (poor quality image)
    for j in range(len(nom)):
        imaj = pyfits.getdata(nom[j])
        c0 = centroid(imaj, ones_mask) #flux weighted centroid
#        print c0
        f.write(nom[j]+'\t'+str(c0[0])+'\t'+str(c0[1])+'\n')
f.close()



